<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[jQuery中的addClass()方法]]></title>
      <url>%2F2017%2F02%2F12%2FjQuery%E4%B8%AD%E7%9A%84addClass-%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[.addClass( className )方法 .addClass( className ) : 为每个匹配元素所要增加的一个或多个样式名 .addClass( function(index, currentClass) ) : 这个函数返回一个或更多用空格隔开的要增加的样式名注意事项：.addClass()方法不会替换一个样式类名。它只是简单的添加一个样式类名到元素上简单的描述下：在p元素增加一个newClass的样式：1234&lt;p class="orgClass"&gt;&lt;script&gt;$("p").addClass("newClass")&lt;/script&gt; 那么p元素的class实际上是 class=”orgClass newClass”样式只会在原本的类上继续增加，通过空格分隔]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[jQuery中的text()方法]]></title>
      <url>%2F2017%2F02%2F12%2FjQuery%E4%B8%AD%E7%9A%84text-%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[.text()方法得到匹配元素集合中每个元素的文本内容结合，包括他们的后代，或设置匹配元素集合中每个元素的文本内容为指定的文本内容具体有3种用法： .text() 得到匹配元素集合中每个元素的合并文本，包括他们的后代 .text( textString ) 用于设置匹配元素内容的文本 .text( function(index, text) ) 用来返回设置文本内容的一个函数注意事项：.text()结果返回一个字符串，包含所有匹配元素的合并文本 1234&lt;script type="text/javascript"&gt; //通过.text()方法替换文本内容 $("a:first").text('替换第一个a标签的内容')&lt;/script&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[jQuery中的html()方法]]></title>
      <url>%2F2017%2F02%2F12%2FjQuery%E4%B8%AD%E7%9A%84html-%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[.html()方法获取集合中第一个匹配元素的HTML内容 或 设置每一个匹配元素的html内容具体有3种用法： .html() 不传入值，就是获取集合中第一个匹配元素的HTML内容 .html( htmlString ) 设置每一个匹配元素的html内容 .html( function(index, oldhtml) ) 用来返回设置HTML内容的一个函数 ###注意事项：.html()方法内部使用的是DOM的innerHTML属性来处理的，所以在设置与获取上需要注意的一个最重要的问题，这个操作是针对整个HTML内容（不仅仅只是文本内容） 1234&lt;script type="text/javascript"&gt; //通过.html()方法替换html结构 $("div:first").html('整个div的子节点都被替换了')&lt;/script&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[jQuery中的css()方法]]></title>
      <url>%2F2017%2F02%2F12%2FjQuery%E4%B8%AD%E7%9A%84css-%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[.css() 方法：获取元素样式属性的计算值或者设置元素的CSS属性 获取： .css( propertyName ) ：获取匹配元素集合中的第一个元素的样式属性的计算值 .css( propertyNames )：传递一组数组，返回一个对象结果设置： .css(propertyName, value )：设置CSS .css( propertyName, function )：可以传入一个回调函数，返回取到对应的值进行处理 .css( properties )：可以传一个对象，同时设置多个样式注意事项： 浏览器属性获取方式不同，在获取某些值的时候都jQuery采用统一的处理，比如颜色采用RBG，尺寸采用px .css()方法支持驼峰写法与大小写混搭的写法，内部做了容错的处理当一个数只被作为值（value）的时候， jQuery会将其转换为一个字符串，并添在字符串的结尾处添加px，例如 .css(“width”,50}) 与 .css(“width”,”50px”})一样学习代码： 1234567891011&lt;script type="text/javascript"&gt; //多种写法设置颜色 $('.fourth').css("background-color", "red") // $('.fifth').get(0).style.background="yellow" $('.fifth').css("backgroundColor", "yellow") &lt;/script&gt; &lt;script type="text/javascript"&gt; //多种写法设置字体大小 $('.fourth').css("font-size", "15px") $('.fifth').css("foontSize", "0.9em") &lt;/script&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[jQuery属性操作方法]]></title>
      <url>%2F2017%2F02%2F12%2FjQuery%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[目前我只是粗浅的学习了几种jQuery属性操作方法。这些方法对于 XML 文档和 HTML 文档均是适用的，除了：html()。 css()html()text()addClass()hasClass()removeClass()toggleClass()attr()removeAttr()css()val()]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[jQuery初步学习]]></title>
      <url>%2F2017%2F02%2F11%2FjQuery%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%2F</url>
      <content type="text"><![CDATA[jQuery是javascript的一个子集，jQuery使人们不用顾虑浏览器的兼容性（我说的就是IE）。这里主要介绍jQuery的选择器 引入jQuery库：1&lt;script src="https://code.jquery.com/jquery-3.1.1.min.js"&gt;&lt;/script&gt; jQuery版的Hello，World！12345&lt;script&gt; $(document).ready(function () &#123; $("div").html("Hello,world!"); &#125;)&lt;/script&gt; Query中的页面加载后 “监听事件”的方法：1$(document).ready(function()&#123;&#125;); 等同于1window.onload = function()&#123;&#125;; 但ready事件优先于onload事件执行 简单的jQuery选择器jQuery基本选择器 ID选择器：$(“#id”) Class选择器：$(“.Class”) 标签选择器：$(“tagname”) 通配选择器：$(“ * “) 组选择器：$(“seletor1,seletor2,~N”) 层级选择器 1234567891011121314151617181920212223&lt;script type="text/javascript"&gt; //子选择器 //$('div &gt; p') 选择所有div元素里面的子元素P $('div&gt;p').css("border", "1px groove red");&lt;/script&gt;&lt;script type="text/javascript"&gt; //后代选择器 //$('div p') 选择所有div元素里面的p元素 $('div p').css("border", "1px groove red");&lt;/script&gt;&lt;script type="text/javascript"&gt; //相邻兄弟选择器 //选取prev后面的第一个的div兄弟节点 $('div+span').css("border", "3px groove red");&lt;/script&gt;&lt;script type="text/javascript"&gt; //一般相邻选择器 //选取prev后面的所有的div兄弟节点 $('.prev~div').css("border", "3px groove green");&lt;/script&gt; 基本筛选选择器 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;script type="text/javascript"&gt; //找到第一个div $(".div:first").css("color", "#CD00CD");&lt;/script&gt;&lt;script type="text/javascript"&gt; //找到最后一个div $(".div:last").css("color", "#CD00CD");&lt;/script&gt;&lt;script type="text/javascript"&gt; //:even 选择所引值为偶数的元素，从 0 开始计数 $(".div:even").css("border", "3px groove red");&lt;/script&gt;&lt;script type="text/javascript"&gt; //:odd 选择所引值为奇数的元素，从 0 开始计数 $(".div:odd").css("border", "3px groove blue");&lt;/script&gt;&lt;script type="text/javascript"&gt; //:eq //选择单个 $(".aaron:eq(2)").css("border", "3px groove blue");&lt;/script&gt;&lt;script type="text/javascript"&gt; //:gt 选择匹配集合中所有索引值大于给定index参数的元素 $("aaron:gt(3)").css("border", "3px groove blue");&lt;/script&gt;&lt;script type="text/javascript"&gt; //:lt 选择匹配集合中所有索引值小于给定index参数的元素 //与:gt相反 $(".aaron:lt(2)").css("color", "#CD00CD");&lt;/script&gt;&lt;script type="text/javascript"&gt; //:not 选择所有元素去除不匹配给定的选择器的元素 //选中所有紧接着没有checked属性的input元素后的p元素，赋予颜色 $("input:not(:checked)+p").css("background-color", "#CD00CD");&lt;/script&gt; 内容筛选选择器 1234567891011121314151617181920212223&lt;script type="text/javascript"&gt; //查找所有class='div'中DOM元素中包含"box"的元素节点 //并且设置颜色 $(".div:contains('box')").css("color","#CD00CD");&lt;/script&gt;&lt;script type="text/javascript"&gt; //选择所有包含子元素或者文本的a元素 //增加一个蓝色的边框 $("a:parent").css("border", "3px groove blue");&lt;/script&gt;&lt;script type="text/javascript"&gt; //找到a元素下面的所有空节点(没有子元素) //增加一段文本与边框 $("a:empty").text(":empty").css("border", "3px groove red"); &lt;/script&gt;&lt;script type="text/javascript"&gt; //查找所有class='div'中DOM元素中包含"span"的元素节点 //并且设置颜色 $(".div:has(span)").css("color", "blue");&lt;/script&gt; 可见性筛选选择器 123456789&lt;script type="text/javascript"&gt; //查找id = div1的DOM元素,是否可见 show($("#div1:visible"));&lt;/script&gt;&lt;script type="text/javascript"&gt; //查找id = div1的DOM元素,是否隐藏 show($("div1:hidden"));&lt;/script&gt; 属性筛选选择器 123456789101112131415161718192021222324252627282930313233343536373839&lt;script type="text/javascript"&gt; //查找所有div中，属性name=p1的div元素 $("div[name=p1]").css("border", "3px groove red");&lt;/script&gt;&lt;script type="text/javascript"&gt; //查找所有div中，有属性p2的div元素 $("div[p2]").css("border", "3px groove blue");&lt;/script&gt;&lt;script type="text/javascript"&gt; //查找所有div中，有属性name中的值只包含一个连字符“-”的div元素 $('div[name|="-"]').css("border", "3px groove #00FF00");&lt;/script&gt;&lt;script type="text/javascript"&gt; //查找所有div中，有属性name中的值包含一个连字符“空”和“a”的div元素 $('div[name~="a"]').css("border", "3px groove #668B8B");&lt;/script&gt;&lt;script type="text/javascript"&gt; //查找所有div中，属性name的值是用bob开头的 $('div[name^=bob]').css("border", "3px groove red");&lt;/script&gt;&lt;script type="text/javascript"&gt; //查找所有div中，属性name的值是用bob结尾的 $("div[name$=bob]").css("border", "3px groove blue");&lt;/script&gt; &lt;script type="text/javascript"&gt; //查找所有div中，有属性name中的值包含一个test字符串的div元素 $('div[name*="test"]').css("border", "3px groove #00FF00");&lt;/script&gt;&lt;script type="text/javascript"&gt; //查找所有div中，有属性testattr中的值没有包含"true"的div $('div[testattr!="true"]').css("border", "3px groove #668B8B");&lt;/script&gt; 子元素筛选选择器 123456789101112131415161718192021222324252627&lt;script type="text/javascript"&gt; //查找class="first-div"下的第一个a元素 //针对所有父级下的第一个 $('.first-div a:first-child').css("color", "#CD00CD");&lt;/script&gt;&lt;script type="text/javascript"&gt; //查找class="first-div"下的最后一个a元素 //针对所有父级下的最后一个 //如果只有一个元素的话，last也是第一个元素 $('.first-div a:last-child').css("color", "red");&lt;/script&gt;&lt;script type="text/javascript"&gt; //查找class="first-div"下的只有一个子元素的a元素 $('.first-div a:only-child').css("color", "blue");&lt;/script&gt;&lt;script type="text/javascript"&gt; //查找class="last-div"下的第二个a元素 $('last-div a:nth-child(2)').css("color", "#CD00CD");&lt;/script&gt;&lt;script type="text/javascript"&gt; //查找class="last-div"下的倒数第二个a元素 $('last-div a:nth-last-child(2)').css("color", "red");&lt;/script&gt; 表单元素选择器 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;script type="text/javascript"&gt; //查找所有 input, textarea, select 和 button 元素 //:input 选择器基本上选择所有表单控件 $(':input').css("border", "1px groove red"); &lt;/script&gt;&lt;script type="text/javascript"&gt; //匹配所有input元素中类型为text的input元素 $('input:text').css("background", "#A2CD5A");&lt;/script&gt;&lt;script type="text/javascript"&gt; //匹配所有input元素中类型为password的input元素 $('input:password').css("background", "yellow"); &lt;/script&gt;&lt;script type="text/javascript"&gt; //匹配所有input元素中的单选按钮,并选中 $('input:radio').attr('checked','true');&lt;/script&gt;&lt;script type="text/javascript"&gt; //匹配所有input元素中的复选按钮,并选中 $('input:checkbox').attr('checked','true'); &lt;/script&gt;&lt;script type="text/javascript"&gt; //匹配所有input元素中的提交的按钮,修改背景颜色 $('input:submit').css("background", "#C6E2FF");&lt;/script&gt;&lt;script type="text/javascript"&gt; //匹配所有input元素中的图像类型的元素,修改背景颜色 $('input:img').css("background", "#F4A460");&lt;/script&gt;&lt;script type="text/javascript"&gt; //匹配所有input元素中类型为按钮的元素 $('input:button').css("background", "red");&lt;/script&gt;&lt;script type="text/javascript"&gt; //匹配所有input元素中类型为file的元素 $('input:file').css("background", "#CD1076");&lt;/script&gt; 表单对象属性选择器 123456789101112131415161718192021&lt;script type="text/javascript"&gt; //查找所有input所有可用的（未被禁用的元素）input元素。 $('input:enabled').css("border", "2px groove red");&lt;/script&gt;&lt;script type="text/javascript"&gt; //查找所有input所有不可用的（被禁用的元素）input元素。 $('input:disabled').css("border", "2px groove blue");&lt;/script&gt;&lt;script type="text/javascript"&gt; //查找所有input所有勾选的元素(单选框,复选框) //移除input的checked属性 $('input:checked').removeAttr('checked')&lt;/script&gt;&lt;script type="text/javascript"&gt; //查找所有option元素中,有selected属性被选中的选项 //移除option的selected属性 $('option:selected').removeAttr('selected')&lt;/script&gt; 特殊选择器thisJavaScript原生DOM处理 1234567&lt;script type="text/javascript"&gt; var p1 = document.getElementById('test1') p1.addEventListener('click',function()&#123; //直接通过dom的方法改变颜色 this.style.color = "red"; &#125;,false);&lt;/script&gt; jQuery处理123456&lt;script type="text/javascript"&gt; $('#test2').click(function()&#123; //通过包装成jQuery对象改变颜色 $(this).css('color','blue'); &#125;)&lt;/script&gt; Dom对象转换jQuery对象123456789var div = document.getElementsByTagName('div'); //dom对象 div[1].style.color = "blue"; //将dom节点div转化为$div的jquery对象 var $div = $(div); // var $first = $div.first(); //找到第一个div元素 // $first.css('color', 'red'); //给第一个元素设置颜色 $div.get(0).style.color = "red"; $("div").get($div.length -1).style.color = "pink"; jQuery对象转换Dom对象123var $div = $('div'); //jQuery对象 var div = $div.get(0); div.style.color = 'red'; //操作dom对象的属性]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JavaScript面向对象初步学习]]></title>
      <url>%2F2017%2F02%2F11%2FJavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%2F</url>
      <content type="text"><![CDATA[面向对象三大基本特性：封装，继承，多态12345678910111213141516171819202122232425262728293031323334353637383940414243444546var dog = &#123; name: "Pancake", legs: 4, isAwesome: true&#125;//给对象添加方法dog.back = function () &#123; console.log("My name is " + this.name + "!")&#125;dog.back() //My name is Pancake!/* ** 给dog对象添加名为back属性 并给它分配了一个函数 ** 该函数使用了this.name 这会访问对象的name属性中存储的值 **///在多个对象之间共享方法//1.先创建一个函数function speak() &#123; console.log(this.sound + " My name is " + this.name + "!")&#125;//2.创建多个对象var cat = &#123; sound: "Miaow", name: "Mittens", speak: speak&#125;var pig = &#123; sound: "Oink", name: "Charlie", speak: speak&#125;//3.调用speak方法cat.speak() //Miaow My name is Mittens!pig.speak() //Oink My name is Charlie!//构造方法函数function Car(x, y) &#123; this.x = x //构造方法Car接受参数 x,y this.y = x //添加属性 this.x this.y&#125;//调用Car构造方法var tesla = new Car(10, 20)tesla //Car &#123;x: 10, y: 10&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[React初试]]></title>
      <url>%2F2017%2F02%2F11%2FReact%E5%88%9D%E8%AF%95%2F</url>
      <content type="text"><![CDATA[前几天学习了React.js(我其实连jQuery还没有学好)，我就先随便写点，目前就会用React写出Hello，World！（大大的尴尬） 1.1 CDN引用React需要引入三个库:react.min.js - React 的核心库react-dom.min.js - 提供与 DOM 相关的功能browser.min.js - 用于将 JSX 语法转为 JavaScript 语法 两个React库12&lt;script src="//cdn.bootcss.com/react/15.4.2/react.js"&gt;&lt;/script&gt;&lt;script src="//cdn.bootcss.com/react/15.4.2/react-dom.js"&gt;&lt;/script&gt; 和一个jsx语法解析库1&lt;script src="//cdn.bootcss.com/babel-core/6.1.19/browser.min.js"&gt;&lt;/script&gt; 1.2 Heool,world!script部分代码，必须在script后面加上 type=”text/babel”下面是React版的Hello，World!1234ReactDOM.render( &lt;h1&gt;Hello, world!&lt;/h1&gt;, document.getElementById('example') ); Html代码：1&lt;div id="example"&gt;&lt;/div&gt; 以下内容摘抄自菜鸟教程，纯属凑字，我按照教程实验并没有起到任何作用，不知道哪里写的不对，希望有会得同学教一教我！1.3 通过NPM安装React第一步、安装全局包123$ npm install babel -g$ npm install webpack -g$ npm install webpack-dev-server --save-dev | npm install webpack -g 第二步、创建根目录创建一个根目录，目录名为：reactApp，再使用 npm init 初始化，生成 package.json 文件：1234567891011121314151617181920212223242526272829$ mkdir reactApp$ cd reactApp/$ npm initname: (react) zhengzhiyuuversion: (1.0.0)description: 测试entry point: (index.js)test command:git repository:keywords:author:license: (ISC)About to write to D:\react\package.json:&#123; "name": "zhengzhiyuu", "version": "1.0.0", "description": "测试", "main": "index.js", "scripts": &#123; "test": "echo \"Error: no test specified\" &amp;&amp; exit 1" &#125;, "author": "", "license": "ISC"&#125;Is this ok? (yes) 第三步、添加依赖包及插件因为要使用 React, 所以需要先安装它，–save 命令用于将包添加至 package.json 文件。12$ npm install react --save$ npm install react-dom --save 同时我们也要安装一些 babel 插件1234$ npm install babel-core$ npm install babel-loader$ npm install babel-preset-react$ npm install babel-preset-es2015 第四步、创建文件1234$ touch index.html$ touch App.jsx$ touch main.js$ touch webpack.config.js 第五步、设置编译器，服务器，载入器打开 webpack.config.js 文件添加以下代码:12345678910111213141516171819202122232425262728 var config = &#123; entry: './main.js', output: &#123; path:'./', filename: 'index.js', &#125;, devServer: &#123; inline: true, port: 7777 &#125;, module: &#123; loaders: [ &#123; test: /\.jsx?$/, exclude: /node_modules/, loader: 'babel', query: &#123; presets: ['es2015', 'react'] &#125; &#125;] &#125; &#125;module.exports = config; entry: 指定打包的入口文件 main.js。 output：配置打包结果，path定义了输出的文件夹，filename则定义了打包结果文件的名称。 devServer：设置服务器端口号为 7777，端口后你可以自己设定 。module：定义了对模块的处理逻辑，这里可以用loaders定义了一系列的加载器，以及一些正则。当需要加载的文件匹配test的正则时，就会调用后面的loader对文件进行处理，这正是webpack强大的原因。 现在打开 package.json 文件，找到 “scripts” 中的 “test” , “echo \”Error: no test specified\” &amp;&amp; exit 1” 使用以下代码替换：1"start": "webpack-dev-server --hot" 现在我们可以使用 npm start 命令来启动服务。–hot 命令会在文件变化后重新载入，这样我们就不需要在代码修改后重新刷新浏览器就能看到变化。 第六步、index.html设置 div id = “app” 为我们应用的根元素，并引入 index.js 脚本文件。1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset = "UTF-8"&gt; &lt;title&gt;React App&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id = "app"&gt;&lt;/div&gt; &lt;script src = "index.js"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 第七步、App.jsx 和 main.js这是第一个 react 组件这个组件将输出 Hello World!。App.jsx 文件代码:12345678910111213import React from 'react';class App extends React.Component &#123; render() &#123; return ( &lt;div&gt; Hello World!&lt;br /&gt; &lt;/div&gt; ); &#125;&#125;export default App; 需要引入组件并将其渲染到根元素 App 上，这样才可以在浏览器上看到它。main.js 文件代码:123456import React from 'react';import ReactDOM from 'react-dom';import App from './App.jsx';ReactDOM.render(&lt;App /&gt;, document.getElementById('app')) 第八步、运行服务完成以上配置后，即可运行该服务：1$ npm start]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2017年的元宵节]]></title>
      <url>%2F2017%2F02%2F11%2F2017%E5%B9%B4%E7%9A%84%E5%85%83%E5%AE%B5%E8%8A%82%2F</url>
      <content type="text"><![CDATA[今天是我拥有博客的第二天，然而我还依然是一个小白。昨天匆匆搭建完博客就草草了事了，然后发现我的博客没有评论和阅读统计，这个怎么可以，所以我就照着NexT的指导用了第三方插件，由于有了昨天的基础，所以今天的人任务十分的顺利，没有丝毫意外的有了在我看起来可以装X的东西（在其他人眼里这就是渣渣一样的）。不管怎么说，自己做的东西总是觉得是好的，即便它是别人没有要的了已经。我做博客其实是想写一些笔记什么的，但是我发现我没有什么可以写的(连Markdown语法还没有学会)，我这个人堪称无聊至极，还是一个什么都不会的笨蛋，并且一无所有。我学习javascript已经很长时间了，可是到现在我都没有学到皮毛，只是懂了一些最基础的知识，可能真的是因为我是一个差等生吧，从小到大一直如此。也是一个彻头彻尾的loser，无论生活与爱情。谨此纪念我二十多年的失败人生，另外今天是元宵节，某人~元宵节快乐！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[我的第一篇文章]]></title>
      <url>%2F2017%2F02%2F10%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%2F</url>
      <content type="text"><![CDATA[不知道怎么突然就想做一个博客，可能是因为我的某种愿望没有达成吧！然后我就突发奇想的用到了傻瓜博客框架hexo，最开始我就想傻瓜式的应该好弄吧，结果我发现我不是傻瓜，我比傻瓜还傻瓜~~ 看了一下午的教程才学会用hexo，不怪某人说我笨死。我看网上都是自己在研究完别人的教程再自己写一个教程，然后我就不写了，自己还没学明白那！不过我要感谢简书的代码咖啡，他的教程写的不错！ 点此跳转]]></content>
    </entry>

    
  
  
</search>
